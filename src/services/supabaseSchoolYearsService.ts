import { supabase } from '@/lib/supabase'
import type { RealtimePostgresChangesPayload } from '@supabase/supabase-js'
import type { Database } from '@/types/supabase'

export interface SchoolYear {
  id: string
  name: string
  start_date: string
  end_date: string
  is_current: boolean
  created_at: string
  updated_at: string
}

export interface CreateSchoolYearRequest {
  name: string
  start_date: string
  end_date: string
  is_current?: boolean
}

export interface UpdateSchoolYearRequest {
  name?: string
  start_date?: string
  end_date?: string
  is_current?: boolean
}

/**
 * Service pour g√©rer les ann√©es scolaires via Supabase
 */
export const supabaseSchoolYearsService = {
  /**
   * R√©cup√®re toutes les ann√©es scolaires
   */
  async getSchoolYears(): Promise<SchoolYear[]> {
    console.log('üîç [SupabaseSchoolYears] R√©cup√©ration des ann√©es scolaires')

    const { data, error } = await supabase
      .from('school_years')
      .select('*')
      .order('start_date', { ascending: false })

    if (error) {
      console.error('‚ùå [SupabaseSchoolYears] Erreur lors de la r√©cup√©ration:', error)
      throw new Error(`Erreur lors de la r√©cup√©ration des ann√©es scolaires: ${error.message}`)
    }

    console.log(`‚úÖ [SupabaseSchoolYears] ${data?.length || 0} ann√©es scolaires r√©cup√©r√©es`)
    return data || []
  },

  /**
   * R√©cup√®re l'ann√©e scolaire courante
   */
  async getCurrentSchoolYear(): Promise<SchoolYear | null> {
    console.log('üîç [SupabaseSchoolYears] R√©cup√©ration de l\'ann√©e scolaire courante')

    const { data, error } = await supabase
      .from('school_years')
      .select('*')
      .eq('is_current', true)
      .single()

    if (error) {
      if (error.code === 'PGRST116') {
        console.log('‚ÑπÔ∏è [SupabaseSchoolYears] Aucune ann√©e scolaire courante d√©finie')
        return null
      }
      console.error('‚ùå [SupabaseSchoolYears] Erreur lors de la r√©cup√©ration de l\'ann√©e courante:', error)
      throw new Error(`Erreur lors de la r√©cup√©ration de l'ann√©e scolaire courante: ${error.message}`)
    }

    console.log(`‚úÖ [SupabaseSchoolYears] Ann√©e scolaire courante: ${data.name}`)
    return data
  },

  /**
   * R√©cup√®re une ann√©e scolaire par son ID
   */
  async getSchoolYearById(id: string): Promise<SchoolYear | null> {
    console.log(`üîç [SupabaseSchoolYears] R√©cup√©ration de l'ann√©e scolaire: ${id}`)

    const { data, error } = await supabase
      .from('school_years')
      .select('*')
      .eq('id', id)
      .single()

    if (error) {
      if (error.code === 'PGRST116') {
        console.log(`‚ÑπÔ∏è [SupabaseSchoolYears] Ann√©e scolaire non trouv√©e: ${id}`)
        return null
      }
      console.error('‚ùå [SupabaseSchoolYears] Erreur lors de la r√©cup√©ration:', error)
      throw new Error(`Erreur lors de la r√©cup√©ration de l'ann√©e scolaire: ${error.message}`)
    }

    console.log(`‚úÖ [SupabaseSchoolYears] Ann√©e scolaire r√©cup√©r√©e: ${data.name}`)
    return data
  },

  /**
   * R√©cup√®re une ann√©e scolaire par son nom
   */
  async getSchoolYearByName(name: string): Promise<SchoolYear | null> {
    console.log(`üîç [SupabaseSchoolYears] R√©cup√©ration de l'ann√©e scolaire: ${name}`)

    const { data, error } = await supabase
      .from('school_years')
      .select('*')
      .eq('name', name)
      .single()

    if (error) {
      if (error.code === 'PGRST116') {
        console.log(`‚ÑπÔ∏è [SupabaseSchoolYears] Ann√©e scolaire non trouv√©e: ${name}`)
        return null
      }
      console.error('‚ùå [SupabaseSchoolYears] Erreur lors de la r√©cup√©ration:', error)
      throw new Error(`Erreur lors de la r√©cup√©ration de l'ann√©e scolaire: ${error.message}`)
    }

    console.log(`‚úÖ [SupabaseSchoolYears] Ann√©e scolaire r√©cup√©r√©e: ${data.name}`)
    return data
  },

  /**
   * Cr√©e une nouvelle ann√©e scolaire
   */
  async createSchoolYear(schoolYear: CreateSchoolYearRequest): Promise<SchoolYear> {
    console.log('‚ûï [SupabaseSchoolYears] Cr√©ation d\'une nouvelle ann√©e scolaire:', schoolYear.name)

    // Si c'est l'ann√©e courante, d√©sactiver les autres ann√©es courantes
    if (schoolYear.is_current) {
      await this.setCurrentSchoolYear(schoolYear.name, false) // false = ne pas encore d√©finir comme courante
    }

    const { data, error } = await supabase
      .from('school_years')
      .insert([{
        name: schoolYear.name,
        start_date: schoolYear.start_date,
        end_date: schoolYear.end_date,
        is_current: schoolYear.is_current || false
      }])
      .select()
      .single()

    if (error) {
      console.error('‚ùå [SupabaseSchoolYears] Erreur lors de la cr√©ation:', error)
      throw new Error(`Erreur lors de la cr√©ation de l'ann√©e scolaire: ${error.message}`)
    }

    console.log(`‚úÖ [SupabaseSchoolYears] Ann√©e scolaire cr√©√©e: ${data.name}`)
    return data
  },

  /**
   * Met √† jour une ann√©e scolaire
   */
  async updateSchoolYear(id: string, updates: UpdateSchoolYearRequest): Promise<SchoolYear> {
    console.log(`üìù [SupabaseSchoolYears] Mise √† jour de l'ann√©e scolaire: ${id}`)

    // Si on d√©finit cette ann√©e comme courante, d√©sactiver les autres
    if (updates.is_current) {
      await this.setCurrentSchoolYear(id, false)
    }

    const { data, error } = await supabase
      .from('school_years')
      .update({
        ...updates,
        updated_at: new Date().toISOString()
      })
      .eq('id', id)
      .select()
      .single()

    if (error) {
      console.error('‚ùå [SupabaseSchoolYears] Erreur lors de la mise √† jour:', error)
      throw new Error(`Erreur lors de la mise √† jour de l'ann√©e scolaire: ${error.message}`)
    }

    console.log(`‚úÖ [SupabaseSchoolYears] Ann√©e scolaire mise √† jour: ${data.name}`)
    return data
  },

  /**
   * Supprime une ann√©e scolaire
   */
  async deleteSchoolYear(id: string): Promise<boolean> {
    console.log(`üóëÔ∏è [SupabaseSchoolYears] Suppression de l'ann√©e scolaire: ${id}`)

    const { error } = await supabase
      .from('school_years')
      .delete()
      .eq('id', id)

    if (error) {
      console.error('‚ùå [SupabaseSchoolYears] Erreur lors de la suppression:', error)
      throw new Error(`Erreur lors de la suppression de l'ann√©e scolaire: ${error.message}`)
    }

    console.log(`‚úÖ [SupabaseSchoolYears] Ann√©e scolaire supprim√©e`)
    return true
  },

  /**
   * D√©finit une ann√©e scolaire comme courante
   */
  async setCurrentSchoolYear(idOrName: string, makeCurrent: boolean = true): Promise<void> {
    console.log(`üéØ [SupabaseSchoolYears] D√©finition de l'ann√©e courante: ${idOrName}`)

    // D'abord, d√©sactiver toutes les ann√©es courantes
    if (makeCurrent) {
      await supabase
        .from('school_years')
        .update({ is_current: false })
        .neq('id', 'dummy') // Mettre √† jour toutes les lignes
    }

    // Ensuite, activer l'ann√©e sp√©cifi√©e si makeCurrent est true
    if (makeCurrent) {
      const { error } = await supabase
        .from('school_years')
        .update({
          is_current: true,
          updated_at: new Date().toISOString()
        })
        .or(`id.eq.${idOrName},name.eq.${idOrName}`)

      if (error) {
        console.error('‚ùå [SupabaseSchoolYears] Erreur lors de la d√©finition de l\'ann√©e courante:', error)
        throw new Error(`Erreur lors de la d√©finition de l'ann√©e courante: ${error.message}`)
      }
    }

    console.log(`‚úÖ [SupabaseSchoolYears] Ann√©e courante ${makeCurrent ? 'd√©finie' : 'd√©sactiv√©e'}`)
  },

  /**
   * Valide le format d'une ann√©e scolaire
   */
  validateSchoolYearName(name: string): { valid: boolean; error?: string } {
    const schoolYearPattern = /^\d{4}-\d{4}$/
    if (!schoolYearPattern.test(name)) {
      return {
        valid: false,
        error: 'Format invalide. Utilisez YYYY-YYYY (ex: 2024-2025)'
      }
    }

    const years = name.split('-')
    const startYear = parseInt(years[0])
    const endYear = parseInt(years[1])

    if (endYear !== startYear + 1) {
      return {
        valid: false,
        error: 'L\'ann√©e de fin doit √™tre l\'ann√©e suivante (ex: 2024-2025)'
      }
    }

    return { valid: true }
  },

  /**
   * G√©n√®re l'ann√©e scolaire courante bas√©e sur la date
   */
  getCurrentSchoolYearName(): string {
    const now = new Date()
    const currentYear = now.getFullYear()
    const currentMonth = now.getMonth() + 1 // getMonth() retourne 0-11

    // Si on est entre septembre et d√©cembre, l'ann√©e scolaire a commenc√©
    // Si on est entre janvier et ao√ªt, on est dans la deuxi√®me partie
    if (currentMonth >= 9) {
      return `${currentYear}-${currentYear + 1}`
    } else {
      return `${currentYear - 1}-${currentYear}`
    }
  },

  /**
   * Souscription aux changements des ann√©es scolaires (temps r√©el)
   */
  subscribeToSchoolYears(
    callback: (
      payload: RealtimePostgresChangesPayload<Database['public']['Tables']['school_years']['Row']>
    ) => void
  ) {
    console.log('üîî [SupabaseSchoolYears] Abonnement aux changements des ann√©es scolaires')

    return supabase
      .channel('school_years_changes')
      .on('postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'school_years'
        },
        callback
      )
      .subscribe()
  }
}