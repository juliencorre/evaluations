// @ts-nocheck
// Test de la nouvelle architecture
// Ce fichier peut √™tre ex√©cut√© pour tester les nouveaux services

import { useSchoolYearStore } from '@/stores'
import { useClassStore } from '@/stores'
import { useStudentsStore } from '@/stores'

/**
 * Fonction de test pour la nouvelle architecture
 * √Ä ex√©cuter dans la console du navigateur pour tester
 */
export async function testNewArchitecture() {
  console.log('üß™ Test de la nouvelle architecture des classes/√©tudiants')

  try {
    // Test 1: School Years Store
    console.log('\n1Ô∏è‚É£ Test SchoolYearStore...')
    const schoolYearStore = useSchoolYearStore()

    await schoolYearStore.ensureLoaded()
    console.log('‚úÖ Ann√©es scolaires charg√©es:', schoolYearStore.schoolYears.length)
    console.log('üìÖ Ann√©e courante:', schoolYearStore.currentSchoolYear?.name || 'Aucune')

    // Test de validation
    const validation = schoolYearStore.validateSchoolYearName('2024-2025')
    console.log('‚úÖ Validation nom ann√©e:', validation.valid ? 'OK' : validation.error)

    // Test 2: Class Store √©tendu
    console.log('\n2Ô∏è‚É£ Test ClassStore √©tendu...')
    const classStore = useClassStore()

    await classStore.loadClasses()
    console.log('‚úÖ Classes charg√©es:', classStore.classes.length)
    console.log('üéì Classes utilisateur:', classStore.userClasses.length)

    // Test de statistiques (si une classe existe)
    if (classStore.classes.length > 0) {
      const firstClass = classStore.classes[0]
      try {
        const stats = await classStore.getClassStatistics(firstClass.id)
        console.log('üìä Statistiques classe:', stats)
      } catch {
        console.log('‚ÑπÔ∏è Statistiques non disponibles (table student_classes pas encore cr√©√©e)')
      }
    }

    // Test 3: Students Store √©tendu
    console.log('\n3Ô∏è‚É£ Test StudentsStore √©tendu...')
    const studentsStore = useStudentsStore()

    await studentsStore.refreshFromSupabase()
    console.log('‚úÖ √âtudiants charg√©s:', studentsStore.allStudents.length)
    console.log('üë• √âtudiants actifs:', studentsStore.activeStudents.length)

    // Test de relation classe-√©tudiant (si donn√©es disponibles)
    if (studentsStore.allStudents.length > 0 && classStore.classes.length > 0) {
      const firstStudent = studentsStore.allStudents[0]
      const firstClass = classStore.classes[0]

      try {
        const studentClasses = await studentsStore.getStudentClasses(firstStudent.id)
        console.log('üîó Classes de l\'√©tudiant:', studentClasses.length)

        const classStudents = await studentsStore.getStudentsForClass(firstClass.id)
        console.log('üîó √âtudiants de la classe:', classStudents.length)
      } catch {
        console.log('‚ÑπÔ∏è Relations non disponibles (table student_classes pas encore cr√©√©e)')
      }
    }

    // Test 4: Int√©gration compl√®te
    console.log('\n4Ô∏è‚É£ Test d\'int√©gration...')

    // V√©rification que les stores communiquent bien
    const currentYear = schoolYearStore.currentSchoolYear
    const classesCurrentYear = classStore.userClasses

    console.log('üîÑ Ann√©e courante dans classStore:', currentYear?.name)
    console.log('üîÑ Classes filtr√©es par ann√©e:', classesCurrentYear.length)

    console.log('\n‚úÖ Test de la nouvelle architecture termin√© avec succ√®s!')
    console.log('üìù √âtat:')
    console.log('  - Services frontend: ‚úÖ Op√©rationnels')
    console.log('  - Stores int√©gr√©s: ‚úÖ Fonctionnels')
    console.log('  - Base de donn√©es: ‚è≥ En attente de migration compl√®te')

    return {
      success: true,
      schoolYears: schoolYearStore.schoolYears.length,
      classes: classStore.classes.length,
      students: studentsStore.allStudents.length,
      currentYear: currentYear?.name
    }

  } catch (error) {
    console.error('‚ùå Erreur pendant le test:', error)
    return { success: false, error: error.message }
  }
}

/**
 * Instructions pour ex√©cuter le test:
 *
 * 1. Ouvrir la console du navigateur (F12)
 * 2. Importer et ex√©cuter:
 *    ```javascript
 *    import('./test/architecture-test.js').then(module => {
 *      module.testNewArchitecture();
 *    });
 *    ```
 *
 * Ou plus simplement, copier le contenu de la fonction testNewArchitecture
 * et l'ex√©cuter directement dans la console.
 */